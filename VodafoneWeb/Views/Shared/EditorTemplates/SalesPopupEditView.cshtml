@using VodafoneWeb
@using VodafoneWeb.Models
@model VodafoneWeb.Models.SalesViewModel

<script type="text/javascript">
    function filterPlans() {
        return {
            categoryId: $("#CategoryId").data("kendoDropDownList").value()
        };
    }

    function filterProduct() {
        return {
            inventoryId: $("#InventoryId").data("kendoComboBox").value(),
            productCategoryId: $("#ProductCategoryId").data("kendoDropDownList").value()
        };
    }

    function filterProductCategory() {
        return {
            inventoryId: $("#InventoryId").data("kendoComboBox").value()
        };
    }

    function filterIMEIs() {
        var row = $(event.srcElement).closest("tr");
        var grid = $(event.srcElement).closest("[data-role=grid]").data("kendoGrid");
        if (grid != null) {
            var dataItem = grid.dataItem(row);
            if (dataItem != null) {
                return {
                    type: $("#Type").data("kendoDropDownList").value(),
                    inventoryId: dataItem.InventoryId,
                    IMEI: dataItem.IMEI
                };
            } else {
                return {
                    type: $("#Type").data("kendoDropDownList").value(),
                    inventoryId: null,
                    IMEI: null
                };
            }
        } else {
            return {
                type: $("#Type").data("kendoDropDownList").value(),
                inventoryId: null,
                IMEI: null
            };
        }
    }

    function dataBound(e) {
        if (this.dataSource.data().length == 1) {
            var that = this;
            setTimeout(function () {
                that.select(1);
                that.trigger("change");
            });
        }
    }

    function dataBoundCombo(e) {
        if (this.dataSource.data().length == 1) {
            var that = this;
            setTimeout(function () {
                that.select(0);
                that.trigger("change");
            });
        }
    }

    function onChange() {
        var selectid = $("#InventoryId").data("kendoComboBox").value();
        $.getJSON("Sales/GetProductCategories?inventoryId=" + selectid, function (data) {
            $("#ProductCategoryId").data("kendoDropDownList").dataSource.data(data);
        });
        $.getJSON("Sales/GetProducts?inventoryId=" + selectid, function (data) {
            $("#ProductId").data("kendoDropDownList").dataSource.data(data);
        });

    }

    function onPlanChange() {
        var selectid = $("#PlanId").data("kendoDropDownList").value();
        if (selectid == 1)
        {
            $('#Note').val ("Outright");
        }
    }

    //    function onIMEICascade(e) {
    //        $("#ProductId").data("kendoDropDownList").DataSource.read();
    //    }


    //function onPrdCategoryCasecade(e) {
    //    $("#ProductId").data("kendoDropDownList").DataSource.read();
    //}
</script>
<div style="overflow: scroll; height: 670px; width: 600px; padding-left: 3px">
    <fieldset>
        <legend>New Record</legend>
        <div style="float: left; width: 55%; overflow: hidden;">
            <dl>
                <dt>
                    @Html.LabelFor(m => m.FirstName):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.FirstName, new { @class = "wide" })
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.LastName):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.LastName, new { @class = "wide" })
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.MobileNumber):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.MobileNumber, new { @class = "wide" })
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.Pin):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.Pin, new { @class = "wide" })
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.OrderNumber):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.OrderNumber, new { @class = "wide" })
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.PortinNumber):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.PortinNumber, new {@class = "wide"})
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.CategoryId):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.CategoryId)
                          .AutoBind(true)
                          .OptionLabel("Select Category...")
                          .DataTextField("CategoryName")
                          .DataValueField("CategoryId")
                          .DataSource(dataSource =>
                          {
                              dataSource.Read(read => read.Action("GetCategories", "Sales"))
                                  .ServerFiltering(true);
                          })
                          .HtmlAttributes(new { @class = "wide" })
                    )
                    @Html.ValidationMessageFor(m => m.CategoryId)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.PlanId):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.PlanId)
                          .AutoBind(true)
                          .OptionLabel("Select Plan...")
                          .DataTextField("PlanName")
                          .DataValueField("PlanId")
                          .DataSource(dataSource =>
                          {
                              dataSource.Read(read => read.Action("GetPlans", "Sales").Data("filterPlans"))
                                  .ServerFiltering(true);
                          })
                          .CascadeFrom("CategoryId")
                          .HtmlAttributes(new { @class = "wide" })
                          .Events(e => e.Change("onPlanChange"))
                    )
                    @Html.ValidationMessageFor(m => m.PlanId)
                </dd>
            </dl>
        </div>
        <div style="overflow: hidden; padding-left: 2px">
            <dl>
                <dt>
                    @Html.LabelFor(m => m.Type):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.Type)
                            .ValuePrimitive(true)
                            //.HtmlAttributes(new { data_value_primitive = "true" })
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .OptionLabel("Select IMEI Type...")
                                .ValuePrimitive(true)
                        .BindTo(HelperMethods.EnumToSelectList(typeof(InventoryType)))
                                .HtmlAttributes(new { @class = "wide" })
                    )
                    @Html.ValidationMessageFor(m => m.Type)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.IMEI):
                </dt>
                <dd>
                    @(Html.Kendo().ComboBoxFor(m => m.InventoryId)
                          .AutoBind(true)
                 .ValuePrimitive(true)
                          .DataTextField("IMEI")
                          .DataValueField("InventoryId")
                          .DataSource(dataSource =>
                          {
                              dataSource.Read(read => read.Action("GetIMEIs", "Sales").Data("filterIMEIs"))
                                  .ServerFiltering(true);
                          })
                          .CascadeFrom("Type")
                          .Events(e =>
                          {
                              e.Change("onChange");
                              e.DataBound("dataBoundCombo");
                          })
                          .HtmlAttributes(new {@class = "wide"})
                          .Suggest(true)
                          )
                    @Html.ValidationMessageFor(m => m.IMEI)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.ProductCategoryId):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.ProductCategoryId)
                          .AutoBind(true)
                          .OptionLabel("Select Product Category...")
                          .DataTextField("ProductCategoryName")
                          .DataValueField("ProductCategoryId")
                          .DataSource(dataSource =>
                          {
                              dataSource.Read(read => read.Action("GetProductCategories", "Sales").Data("filterProductCategory"))
                                  .ServerFiltering(true);
                          })
                          .Events(e => e.DataBound("dataBound"))
                          //.Events(e => e.Cascade("onPrdCategoryCasecade"))
                          .HtmlAttributes(new { @class = "wide" })
                    )
                    @Html.ValidationMessageFor(m => m.ProductCategoryId)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.ProductId):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.ProductId)
                          .AutoBind(true)
                          .OptionLabel("Select Product...")
                          .DataTextField("ProductName")
                          .DataValueField("ProductId")
                          .DataSource(dataSource =>
                          {
                              dataSource.Read(read => read.Action("GetProducts", "Sales").Data("filterProduct"))
                                  .ServerFiltering(true);
                          })
                          .CascadeFrom("ProductCategoryId")
                          .Events(e => e.DataBound("dataBound"))
                          .HtmlAttributes(new { @class = "wide" })
                    )

                    @Html.ValidationMessageFor(m => m.ProductId)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.RefferA):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.RefferA, new {@class = "wide"})
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.RefferB):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.RefferB, new {@class = "wide"})
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.Gift):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.Gift, new {@class = "wide"})
                </dd>
            </dl>
            <dl @if (!HttpContext.Current.User.IsInRole("Admin"))
                {
                    <text>hidden</text>
                }>
                <dt>
                    @Html.LabelFor(m => m.Audit):
                </dt>
                <dd>
                    @(Html.Kendo().DropDownListFor(m => m.Audit)
                            .ValuePrimitive(true)
                          //.HtmlAttributes(new {data_value_primitive = "true"})
                          .DataTextField("Text")
                          .DataValueField("Value")
                          .OptionLabel("Select Audit Result...")
                          .BindTo(HelperMethods.EnumToSelectList(typeof (AuditType)))
                          .HtmlAttributes(new {@class = "wide"})
                          )
                    @Html.ValidationMessageFor(m => m.Audit)
                </dd>
            </dl>
            <dl>
                <dt>
                    @Html.LabelFor(m => m.Note):
                </dt>
                <dd>
                    @Html.TextBoxFor(m => m.Note, new {@class = "wide"})
                </dd>
            </dl>
        </div>
    </fieldset>
</div>
<style>
div.k-edit-form-container{
      width: 90%;
      height: auto;

  }
input[type="text"]{
          -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
}

.wide
{
     width: 245px;
}
</style>